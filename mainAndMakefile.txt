# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    mainAndMakefile.txt                                :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: cdedessu <cdedessu@student.s19.be>         +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/01/15 12:20:12 by jmaizel           #+#    #+#              #
#    Updated: 2025/01/28 09:46:53 by cdedessu         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "../includes/execution.h"

/* Affiche le prompt et lit l'entrée utilisateur */
static char	*get_input(void)
{
	char	*line;

	line = readline("minishell> ");
	if (!line)
		ft_putendl_fd("exit", STDOUT_FILENO);
	else if (*line)
		add_history(line);
	return (line);
}

/* Gère une ligne de commande simple */
static void	execute_command_line(char *line, t_tools *tools)
{
	t_simple_cmds	cmd;

	cmd.str = (char *[]){line, NULL};
	cmd.redirections = NULL;
	cmd.next = NULL;
	cmd.prev = NULL;
	apply_redirections(&cmd);
	execute_simple_command(&cmd, tools);
}

int	main(int argc, char **argv, char **envp)
{
	char	*line;
	t_tools	tools;

	(void)argc;
	(void)argv;
	tools.env = envp;
	tools.exit_code = 0;
	while (1)
	{
		line = get_input();
		if (!line)
			break ;
		execute_command_line(line, &tools);
		free(line);
	}
	return (tools.exit_code);
}

/* int main(void)
{
	char *test1 = "echo \"Hello 'world'\""; // Toutes les quotes sont fermées
	char *test2 = "echo 'Hello world";      // Single quote non fermée
	char *test3 = "echo \"Hello world";     // Double quote non fermée

	printf("Test 1: %d\n", is_quote_closed(test1)); // 1
	printf("Test 2: %d\n", is_quote_closed(test2)); // 0
	printf("Test 3: %d\n", is_quote_closed(test3)); // 0

	return (0);
} */



NAME = minishell
CC = gcc
CFLAGS = -Wall -Wextra -Werror -I$(INCLUDES_DIR) -I$(LIBFT_DIR) $(READLINE_INC)

# Directory structure
LIBFT_DIR = ./libft
INCLUDES_DIR = includes
OBJ_DIR = objs
PARSING_DIR = ./srcs/parsing
EXEC_DIR = ./srcs/exec
MAIN_DIR = ./srcs/main
ENV_DIR = ./srcs/env
BUILTINS_DIR = ./srcs/builtins
TOOLS_DIR = ./srcs/tools

# Readline paths
READLINE_INC = -I/opt/homebrew/opt/readline/include
READLINE_LIB = -L/opt/homebrew/opt/readline/lib
LIBS = $(READLINE_LIB) -lreadline -L$(LIBFT_DIR) -lft

# Library
LIBFT = $(LIBFT_DIR)/libft.a

# Source files by directory
PARSING_FILES = parsing1.c
EXEC_FILES = cleanup.c env_utils.c error_handling.c execution.c execution_utils.c expansion.c pipes.c redirection.c signals.c heredoc.c exit_status.c utils.c
MAIN_FILES = main.c
ENV_FILES =
BUILTINS_FILES = echo.c cd.c
TOOLS_FILES =

# Create full source paths
SRC_FILES = $(addprefix $(MAIN_DIR)/, $(MAIN_FILES)) \
	$(addprefix $(PARSING_DIR)/, $(PARSING_FILES)) \
	$(addprefix $(EXEC_DIR)/, $(EXEC_FILES)) \
	$(addprefix $(ENV_DIR)/, $(ENV_FILES)) \
	$(addprefix $(BUILTINS_DIR)/, $(BUILTINS_FILES)) \
	$(addprefix $(TOOLS_DIR)/, $(TOOLS_FILES))

OBJS = $(SRC_FILES:./srcs/%.c=$(OBJ_DIR)/%.o)

# Progress bar variables
TOTAL_FILES := $(words $(SRC_FILES))
COMPILED_FILES := 0

define progress_bar
	@$(eval COMPILED_FILES=$(shell echo $$(($(COMPILED_FILES) + 1))))
	@PROGRESS=$$(($(COMPILED_FILES) * 100 / $(TOTAL_FILES))); \
	BAR=$$(seq -s= $$(($$PROGRESS / 5)) | sed 's/[0-9]//g'); \
	printf "\rCompiling [%-20s] %d%%" "$$BAR" "$$PROGRESS"
endef

# Rules
all: $(NAME)

$(NAME): $(OBJS) $(LIBFT)
	@$(CC) $(CFLAGS) -o $(NAME) $(OBJS) $(LIBS)

$(OBJ_DIR)/%.o: ./srcs/%.c | $(OBJ_DIR)
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@
	$(call progress_bar)

$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR)/parsing
	@mkdir -p $(OBJ_DIR)/exec
	@mkdir -p $(OBJ_DIR)/main
	@mkdir -p $(OBJ_DIR)/env
	@mkdir -p $(OBJ_DIR)/builtins
	@mkdir -p $(OBJ_DIR)/tools

$(LIBFT):
	@make --no-print-directory -C $(LIBFT_DIR)

clean:
	@rm -rf $(OBJ_DIR)
	@make clean --no-print-directory -C $(LIBFT_DIR)

fclean: clean
	@rm -f $(NAME)
	@make fclean --no-print-directory -C $(LIBFT_DIR)

re: fclean all

.PHONY: all clean fclean re